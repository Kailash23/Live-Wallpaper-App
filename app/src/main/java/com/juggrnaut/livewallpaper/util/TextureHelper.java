package com.juggrnaut.livewallpaper.util;

import static android.opengl.GLES20.GL_LINEAR;
import static android.opengl.GLES20.GL_LINEAR_MIPMAP_LINEAR;
import static android.opengl.GLES20.GL_TEXTURE_2D;
import static android.opengl.GLES20.GL_TEXTURE_CUBE_MAP;
import static android.opengl.GLES20.GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
import static android.opengl.GLES20.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
import static android.opengl.GLES20.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
import static android.opengl.GLES20.GL_TEXTURE_CUBE_MAP_POSITIVE_X;
import static android.opengl.GLES20.GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
import static android.opengl.GLES20.GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
import static android.opengl.GLES20.GL_TEXTURE_MAG_FILTER;
import static android.opengl.GLES20.GL_TEXTURE_MIN_FILTER;
import static android.opengl.GLES20.glBindTexture;
import static android.opengl.GLES20.glDeleteTextures;
import static android.opengl.GLES20.glGenTextures;
import static android.opengl.GLES20.glGenerateMipmap;
import static android.opengl.GLES20.glTexParameteri;
import static android.opengl.GLUtils.texImage2D;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Log;


public class TextureHelper {
    private static final String TAG = "TextureHelper";

    // Loads a texture from a resource ID, returning the OpenGL ID for that
    // texture. Returns 0 if the load failed.

    //Our first task will be to load data from an image file into an OpenGL texture.

    //This method will take in an Android context and a resource ID and will return
    //the ID of the loaded OpenGL texture. To start off, we’ll generate a new texture
    //ID using the same type of pattern as when we’ve created other OpenGL objects
    public static int loadTexture(Context context, int resourceId) {
        final int[] textureObjectIds = new int[1];
        glGenTextures(1, textureObjectIds, 0);
        if (textureObjectIds[0] == 0) {
            if (LoggerConfig.ON) {
                Log.w(TAG, "Could not generate a new OpenGL texture object.");
            }
            return 0;
        }

        //The next step is to use Android’s APIs to read in the data from our image files.
        //OpenGL can’t read data from a PNG or JPEG file directly because these files
        //are encoded into specific compressed formats. OpenGL needs the raw data
        //in an uncompressed form, so we’ll need to use Android’s built-in bitmap
        //decoder to decompress our image files into a form that OpenGL understands.

        //Let’s continue implementing loadTexture() and decompress the image into an
        //Android bitmap
        final BitmapFactory.Options options = new BitmapFactory.Options();

        //We first create a new instance of BitmapFactory.Options called options, and we set
        //inScaled to false. This tells Android that we want the original image data instead
        //of a scaled version of the data.
        options.inScaled = false;


        //We then call BitmapFactory.decodeResource() to do the actual decode, passing in
        //the Android context, resource ID, and the decoding options that we’ve just
        //defined. This call will decode the image into bitmap or will return null if it failed.
        //We check against that failure and delete the OpenGL texture object if the
        //bitmap is null. If the decode succeeded, we continue processing the texture.
        final Bitmap bitmap = BitmapFactory.decodeResource(
                context.getResources(), resourceId, options);

        if (bitmap == null) {
            if (LoggerConfig.ON) {
                Log.w(TAG, "Resource ID " + resourceId
                        + " could not be decoded.");
            }

            glDeleteTextures(1, textureObjectIds, 0);

            return 0;
        }

        // Bind to the texture in OpenGL
        //The first parameter, GL_TEXTURE_2D, tells OpenGL that this should be treated
        //as a two-dimensional texture, and the second parameter tells OpenGL which
        //texture object ID to bind to.
        glBindTexture(GL_TEXTURE_2D, textureObjectIds[0]);

        // Set filtering: a default must be set, or the texture will be
        // black.

        //We’ll also need to specify what should happen when the texture is expanded
        //or reduced in size, using texture filtering. When we draw a texture onto the
        //rendering surface, the texture’s texels may not map exactly onto the fragments
        //generated by OpenGL. There are two cases: “minification” and magnification.
        //Minification happens when we try to cram several texels onto the same fragment,
        //and magnification happens when we spread one texel across many
        //fragments. We can configure OpenGL to use a texture filter for each case.

        //We set each filter with a call to glTexParameteri(): GL_TEXTURE_MIN_FILTER refers to
        //minification, while GL_TEXTURE_MAG_FILTER refers to magnification. For minification,
        //we select GL_LINEAR_MIPMAP_LINEAR, which tells OpenGL to use trilinear
        //filtering. We set the magnification filter to GL_LINEAR, which tells OpenGL to
        //use bilinear filtering.
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

        // Load the bitmap into the bound texture.
        //This call tells OpenGL to read in the bitmap data defined by bitmap and copy
        //it over into the texture object that is currently bound.
        texImage2D(GL_TEXTURE_2D, 0, bitmap, 0);


        glGenerateMipmap(GL_TEXTURE_2D);

        // Recycle the bitmap, since its data has been loaded into
        // OpenGL.
        // Now that the data’s been loaded into OpenGL, we no longer need to keep the
        //Android bitmap around. Under normal circumstances, it might take a few
        //garbage collection cycles for Dalvik to release this bitmap data, so we should
        //call recycle() on the bitmap object to release the data immediately
        bitmap.recycle();

        // Unbind from the texture.
        //Now that we’ve finished loading the texture, a good practice is to then unbind
        //from the texture so that we don’t accidentally make further changes to this
        //texture with other texture calls
        glBindTexture(GL_TEXTURE_2D, 0);

        //Passing 0 to glBindTexture() unbinds from the current texture. The last step is
        //to return the texture object ID
        return textureObjectIds[0];
    }

}
